[[language]]
name = "rust"
language-servers = ["rust-analyzer"]
auto-format = false

[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }
language-servers = ["scls", "gopls", "lsp-ai"]

[[language]]
name = "typescript"
auto-format = true
language-servers = [
  "typescript-language-server",
  "eslint",
]
formatter = { command = "npx", args = ["prettier", "--parser", "typescript"] }

[[language]]
name = "python"
language-servers = [  "basedpyright", "ruff" ]
# language-servers = [  "pylsp", "ruff" ]
auto-format = true
formatter = { command = "sh", args = ["-c", "isort --profile black -  | black -"]}

[language-server.ruff]
command = "ruff"
args = ["server"]

[[language]]
name = "json"
language-servers = [ "vscodejson" ]

[[language]]
name = "markdown"
language-servers = [ "lsp-ai" ] 

[language-server.vscodejson]
command = "vscode-json-languageserver"

[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = false                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false         

##############################
## Configuration for lsp-ai ##
##############################

[language-server.lsp-ai]
command = "lsp-ai"

[language-server.lsp-ai.config.memory]
file_store = { }

#
# CODE COMPLETION
#

[language-server.lsp-ai.config.models.model1]
type = "open_ai"
chat_endpoint = "https://litellm.intdw.org/chat/completions"
model =  "gpt-4.1"
# model =  "gpt-4o"
auth_token_env_var_name = "ANTHROPIC_AUTH_TOKEN"

[language-server.lsp-ai.config.completion]
model = "model1"

[language-server.lsp-ai.config.completion.parameters]
max_tokens = 256
max_context = 1024

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "system"
content = "Instructions:\n- You are an AI programming assistant.\n- Given a piece of code with the cursor location marked by \"<CURSOR>\", replace \"<CURSOR>\" with the correct code or comment.\n- First, think step-by-step.\n- Describe your plan for what to build in pseudocode, written out in great detail.\n- Then output the code replacing the \"<CURSOR>\"\n- Ensure that your completion fits within the language context of the provided code snippet (e.g., Python, JavaScript, Rust).\n\nRules:\n- Only respond with code or comments.\n- Only replace \"<CURSOR>\"; do not include any previously written code.\n- Never include \"<CURSOR>\" in your response\n- If the cursor is within a comment, complete the comment meaningfully.\n- Handle ambiguous cases by providing the most contextually appropriate completion.\n- Be consistent with your responses."

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "def greet(name):\n    print(f\"Hello, {<CURSOR>}\")"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "name"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "function sum(a, b) {\n    return a + <CURSOR>;\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "fn multiply(a: i32, b: i32) -> i32 {\n    a * <CURSOR>\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# <CURSOR>\ndef add(a, b):\n    return a + b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "Adds two numbers"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# This function checks if a number is even\n<CURSOR>"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "def is_even(n):\n    return n % 2 == 0"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "{CODE}"

#
# CHAT
#
 
[language-server.lsp-ai.config.models.model2]
type = "anthropic"
chat_endpoint = "https://litellm.intdw.org/v1/messages"
model = "claude-sonnet-4-20250514"
auth_token_env_var_name = "ANTHROPIC_AUTH_TOKEN"

[[language-server.lsp-ai.config.chat]]
trigger = "!C"
action_display_name = "Chat with AI"
model = "model2"

[language-server.lsp-ai.config.chat.parameters]
max_context = 4096
max_tokens = 1024
system = "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately"
